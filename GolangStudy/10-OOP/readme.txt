在 Go 语言中，类型实现接口是隐式的，不需要显式地声明类似 C++ 中的继承关系。
这是 Go 语言中的一个关键概念，使得代码更加灵活。
让我们来看一下 Go 中的接口是如何工作的以及与 C++ 继承的区别：

接口实现方式:
	Go: 在 Go 中，不需要显式声明一个类型是从接口继承的。一个类型只需要实现了接口中声明的所有方法，它就被视为实现了该接口。这种方式被称为 "Duck Typing"，类型被识别为接口的实现是基于其行为而不是显式的继承关系。
	C++: 在 C++ 中，类需要显式地声明它继承自其他类（通过 class Derived : public Base 这样的方式），这是一种显式的继承关系。

关联:
	Go: 在 Go 中，关联是基于类型的方法集，而不是继承。如果一个类型拥有某个接口所声明的所有方法，那么它就被认为实现了该接口，无论该类型是如何定义的。这种方式允许多个不同类型拥有相同的方法，从而实现相同的接口。
	C++: 在 C++ 中，继承是通过创建类的派生类来实现的。父类的属性和方法在子类中是可见的，并且子类可以通过继承来重用和扩展父类的行为。

多态:
	Go: Go 语言中的多态是通过接口实现的。任何实现了接口的类型都可以被用作接口类型的变量，从而实现多态。
	C++: C++ 通过虚函数和继承来实现多态。只有在 C++ 中继承自同一个基类的类才能够通过基类指针或引用实现多态。

总结来说，Go 语言中的接口是一种更加灵活和动态的方法，它不需要显式的继承关系，只需要实现接口中的方法即可。
这使得 Go 语言更加适合于构建灵活和可扩展的代码，而不需要严格的继承层次结构。
 C++ 则更加静态，需要在编译时明确定义类之间的继承关系。两种语言的选择取决于你的项目需求和设计偏好。